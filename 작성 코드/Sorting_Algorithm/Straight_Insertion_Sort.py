
from typing import MutableSequence

def insertion_sort(a: MutableSequence) -> None:

    n = len(a)
    for i in range(1, n):
        j = i
        tmp = a[i]
        while j > 0 and a[j - 1] > tmp:
            a[j] = a[j - 1]
            j -= 1
        a[j] = tmp

    return a

x = [1,3,9,4,7,8,6]
print(insertion_sort(x))


""" 해설 : 삽입 정렬은 정렬되지 않은 부분의 맨 앞 원소를 정렬된 부분에 '알맞은 위치(정렬된 위치)로 삽입' 하는 정렬이다.
    원소를 선택하고 '알맞은 위치에 삽입' 하는 과정은 데이터 비교를 하다가 
    1. 정렬된 배열의 왼쪽 끝에 도달한 경우( 배열의 첫 번째 인덱스에 도달), 2. 선택된 원소보다 값이 작거나, 같은 원소를 발견한 경우
    이 2조건 중 하나가 충족되면 데이터 비교를 멈추고 해당 자리에 원소가 삽입된다. 이를 종료조건이라고 칭하며
    이는 드모르간의 법칙에 의해서 계속 조건으로 바꿀 수 있는데
    1. 정렬된 배열의 왼쪽 끝에 도달하지 않은 경우  , 2. 선택된 원소의 값이 정렬된 원소보다 큰 경우 
    라고 하며 이는 프로그래밍 상에서 
    1. i의 값을가진 반복제어 변수 j를 설정해 j > 0 인 경우
    2. a[i]값을 가진 tmp 변수를 설정해 a[j-1] 보다 큰 경우
    로 표현할 수 있다. 이렇게 계속 조건을 충족시키다가 충족 시키지 못한 경우 선택된 원소의 값이 해당 자리로 삽입된다."""